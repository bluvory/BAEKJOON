from collections import deque

n, m, v = map(int, input().split())
graph = [[False] * (n+1) for _ in range(n+1)]

for _ in range(m):
    a, b = map(int, input().split())
    graph[a][b] = True
    graph[b][a] = True

bfs_res = [False]*(n+1)
dfs_res = [False]*(n+1)


# 너비우선탐색 -> deque 사용
def go_bfs(v):
    q = deque([v])
    bfs_res[v] = True
    while q:
        v = q.popleft()
        print(v, end=' ')
        for i in range(1, n+1):
            if not bfs_res[i] and graph[v][i]:
                q.append(i)
                bfs_res[i] = True


# 깊이우선탐색 -> stack 사용 + 재귀 사용
def go_dfs(v):
    dfs_res[v] = True
    print(v, end=' ')
    for i in range(1, n+1):
        if not dfs_res[i] and graph[v][i]:
            go_dfs(i)
    return

go_dfs(v)
print()
go_bfs(v)
